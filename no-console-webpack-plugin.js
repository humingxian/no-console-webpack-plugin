

class NoConsoleWebpackPlugin {
  constructor(options) { // 可以接受参数
    console.log(options)
    this.options = options ? options : {}
    if(Object.prototype.toString.call(this.options.type) === '[object Array]') {
      this.type = this.options.type.slice()
    }
    if(Object.prototype.toString.call(this.options.type) === '[object String]') {
      this.type = [ this.options.type ]
    }
    if(!this.options.type) {
      this.type = Object.getOwnPropertyNames(console)
    }
  }
}

NoConsoleWebpackPlugin.prototype.apply = function(compiler) {
  // compiler.hooks就是compiler编译器的勾子，里面可以访问webpack编译的时候各种生命周期
  // emit： 生成资源到 output 目录之前。参数（compilation）(异步的生命周期)

  const _this = this

  // 一般勾子是这样用的：
  // compiler.hooks.someHook.tap(...)
  // 某些钩子上可以访问 tapAsync 和 tapPromise。
  compiler.hooks.emit.tapAsync('NoConsoleWebpackPlugin', (compilation, cb) => {
    // debugger
    console.log('以异步方式触及 emit 钩子。')
   
    // console.log(compilation)
    // 检索每个（构建输出的）chunk：
    compilation.chunks.forEach(function(chunk) {
      // 检索 chunk 中（内置输入的）的每个模块：
      // chunk.modules.forEach(function(module) {
      // 检索模块中包含的每个源文件路径：
      //   module.fileDependencies.forEach(function(filepath) {
      // 我们现在已经对源结构有不少了解……
      //   });
      // });

      // 检索由 chunk 生成的每个资源(asset)文件名：
      chunk.files.forEach(function(filename) {
        // Get the asset source for each file generated by the chunk:
        var source = compilation.assets[filename].source();
        
        // console.log(source)
        // debugger
        _this.type.forEach(type => {
          let reg = new RegExp(`console.${type}`, 'g')

          source = source.replace(reg, `;(function(){})`)
        })

        compilation.assets[filename] = {
          source: function() {
            return source
          },
          size: function() {
            return source.length
          }
        }

        

        

      });
    });
    // 在输出资源中添加一个CopyRightForProject.txt资源： source表示内容，size表示大小
    // compilation.assets['CopyRightForProject.txt'] = {
    //   source: function() {
    //     return 'copyright by dada hu.'
    //   },
    //   size: function() {
    //     return 20
    //   }
    // }
    cb()
  })
}

// compiler.hooks下面的各种生命周期（勾子）,有同步勾子，有异步勾子
// entryOption：在 entry 配置项处理过之后，执行插件。（SyncBailHook）
// afterPlugins： 设置完初始插件之后，执行插件。（SyncHook）
// afterResolvers： resolver 安装完成之后，执行插件。（SyncHook）
// environment：environment 准备好之后，执行插件。（SyncHook）
// 。。。。等等各种勾子



module.exports = NoConsoleWebpackPlugin



// MyPlugin.prototype.apply = function(compiler) {
//   compiler.plugin('emit', function(compilation, callback) {

//     var changedFiles = Object.keys(compilation.fileTimestamps).filter(function(watchfile) {
//       return (this.prevTimestamps[watchfile] || this.startTime) < (compilation.fileTimestamps[watchfile] || Infinity);
//     }.bind(this));

//     this.prevTimestamps = compilation.fileTimestamps;
//     callback();
//   }.bind(this));
// };
